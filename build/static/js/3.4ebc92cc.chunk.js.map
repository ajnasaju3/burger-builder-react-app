{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css"],"names":["checkoutSummary","props","className","classes","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","setState","loading","formData","formElementIdentifier","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","changed","disabled","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinueHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","option","Label","label","module","exports"],"mappings":"gMAqBeA,EAjBO,SAACC,GACnB,OACI,yBAAKC,UAAWC,IAAQC,iBACpB,uDACA,yBAAKC,MAAO,CAACC,MAAM,OAAOC,OAAO,SAC7B,kBAACC,EAAA,EAAD,CAAQC,YAAaR,EAAMQ,eAE/B,kBAACC,EAAA,EAAD,CAAQC,QAAQ,SAASC,QAASX,EAAMY,mBAAxC,UAGA,kBAACH,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAASX,EAAMa,mBAAzC,c,gFCJNC,E,4MACFC,MAAM,CACFC,UAAU,CACFC,KAAK,CACDC,YAAY,QACZC,cAAc,CACVC,KAAK,OACLC,YAAY,aAEhBC,MAAM,GACNC,WAAW,CACPC,UAAS,GAGbC,OAAM,EACNC,SAAQ,GAEZC,OAAO,CACHT,YAAY,QACZC,cAAc,CACVC,KAAK,OACLC,YAAY,UAEhBC,MAAM,GACNC,WAAW,CACPC,UAAS,GAEbC,OAAM,EACNC,SAAQ,GAEZE,QAAQ,CACJV,YAAY,QACZC,cAAc,CACVC,KAAK,OACLC,YAAY,YAEhBC,MAAM,GACNC,WAAW,CACPC,UAAS,EACTK,UAAU,EACVC,UAAU,GAEdL,OAAM,EACNC,SAAQ,GAEZK,QAAQ,CACJb,YAAY,QACZC,cAAc,CACVC,KAAK,OACLC,YAAY,gBAEhBC,MAAM,GACNC,WAAW,CACPC,UAAS,GAEbC,OAAM,EACNC,SAAQ,GAEZM,MAAM,CACFd,YAAY,QACZC,cAAc,CACVC,KAAK,QACLC,YAAY,aAEhBC,MAAM,GACNC,WAAW,CACPC,UAAS,GAEbC,OAAM,EACNC,SAAQ,GAEZO,eAAe,CACXf,YAAY,SACZC,cAAc,CACVe,QAAQ,CACJ,CAACZ,MAAM,UAAUa,aAAa,WAC9B,CAACb,MAAM,WAAWa,aAAa,cAIvCZ,WAAW,GACXD,MAAM,UACNG,OAAM,IAGlBW,aAAY,G,EAGhBC,aAAa,SAACC,GACVA,EAAMC,iBACL,EAAKC,SAAS,CAACC,SAAQ,IACvB,IAAMC,EAAS,GACf,IAAK,IAAIC,KAAyB,EAAK5B,MAAMC,UACzC0B,EAASC,GAAuB,EAAK5B,MAAMC,UAAU2B,GAAuBrB,MAGjF,IAAMsB,EAAM,CACRpC,YAAY,EAAKR,MAAM6C,KACvBC,MAAM,EAAK9C,MAAM8C,MACjBC,UAAUL,EACVM,OAAO,EAAKhD,MAAMgD,QAGtB,EAAKhD,MAAMiD,cAAcL,EAAM,EAAK5C,MAAMkD,Q,EAI9CC,oBAAoB,SAACb,EAAMc,GACvB,IAAMC,EAAmBC,YAAa,EAAKvC,MAAMC,UAAUoC,GAAiB,CACpE9B,MAAMgB,EAAMiB,OAAOjC,MACnBG,MAAM+B,YAAclB,EAAMiB,OAAOjC,MAAM,EAAKP,MAAMC,UAAUoC,GAAiB7B,YAC7EG,SAAQ,IAEV+B,EAAiBH,YAAa,EAAKvC,MAAMC,UAAZ,eAC9BoC,EAAiBC,IAElBjB,GAAY,EAChB,IAAI,IAAIgB,KAAmBK,EACvBrB,EAAYqB,EAAiBL,GAAiB9B,OAASc,EAE3D,EAAKI,SAAS,CAACxB,UAAUyC,EAAiBrB,YAAYA,K,uDAEjD,IAAD,OACEsB,EAAkB,GACxB,IAAI,IAAIC,KAAOC,KAAK7C,MAAMC,UACtB0C,EAAkBG,KAAK,CACnBC,GAAGH,EACHI,OAAOH,KAAK7C,MAAMC,UAAU2C,KAGpC,IAAIK,EACA,0BAAMC,SAAUL,KAAKvB,cAChBqB,EAAkBQ,KAAI,SAAAC,GAAW,OAC9B,kBAACC,EAAA,EAAD,CAAOT,IAAKQ,EAAYL,GACxB5C,YAAaiD,EAAYJ,OAAO7C,YAChCC,cAAegD,EAAYJ,OAAO5C,cAClCG,MAAO6C,EAAYJ,OAAOzC,MAC1B+C,SAAUF,EAAYJ,OAAOtC,MAC7B6C,eAAgBH,EAAYJ,OAAOxC,WACnCG,QAASyC,EAAYJ,OAAOrC,QAC5B6C,QAAS,SAACjC,GAAD,OAAS,EAAKa,oBAAoBb,EAAM6B,EAAYL,UAE7D,kBAACrD,EAAA,EAAD,CAAQC,QAAQ,UAAU8D,UAAWZ,KAAK7C,MAAMqB,aAAhD,UAMZ,OAHGwB,KAAK5D,MAAMyC,UACVuB,EAAK,kBAACS,EAAA,EAAD,OAGL,yBAAKxE,UAAWC,IAAQY,aACpB,uDACCkD,O,GAvJSU,aA2KXC,eAfO,SAAA5D,GAClB,MAAM,CACF8B,KAAK9B,EAAM6D,cAAcpE,YACzBsC,MAAM/B,EAAM6D,cAAcC,WAC1BpC,QAAQ1B,EAAM6B,MAAMH,QACpBS,MAAMnC,EAAM+D,KAAK5B,MACjBF,OAAOjC,EAAM+D,KAAK9B,WAGD,SAAA+B,GACrB,MAAM,CACF9B,cAAc,SAACF,EAAUG,GAAX,OAAmB6B,EAASC,IAAuBjC,EAAUG,QAIpEyB,CAA4CM,YAAiBnE,EAAYoE,M,OChLlFC,E,4MAGFC,yBAAyB,WACrB,EAAKpF,MAAMqF,QAAQC,U,EAEvBC,wBAAwB,WACpB,EAAKvF,MAAMqF,QAAQG,QAAQ,2B,uDAG3B,IAAIC,EAAQ,kBAAC,IAAD,CAAUC,GAAG,MACzB,GAAG9B,KAAK5D,MAAM6C,KAAK,CACf,IAAM8C,EAAkB/B,KAAK5D,MAAM4F,UAAU,kBAAC,IAAD,CAAUF,GAAG,MAAM,KAChED,EACI,6BACKE,EACL,kBAACxF,EAAD,CACAK,YAAaoD,KAAK5D,MAAM6C,KACxBjC,kBAAmBgD,KAAKwB,yBACxBvE,kBAAmB+C,KAAK2B,0BAExB,kBAAC,IAAD,CAAOM,KAAMjC,KAAK5D,MAAM8F,MAAMD,KAAK,gBAAiBE,UAAWjF,KAIvE,OAAO2E,M,GAzBQf,aAqCRC,uBATO,SAAA5D,GAClB,MAAM,CACF8B,KAAK9B,EAAM6D,cAAcpE,YACzBsC,MAAM/B,EAAM6D,cAAcC,WAC1Be,UAAU7E,EAAM6B,MAAMgD,aAKfjB,CAAyBQ,I,gCC1CxC,qCAkDea,IAhDH,SAAChG,GACT,IAAIiG,EAAa,KACXC,EAAa,CAAChG,IAAQiG,cAI5B,OAHGnG,EAAMqE,SAAWrE,EAAMsE,gBAAkBtE,EAAM0B,SAC9CwE,EAAarC,KAAK3D,IAAQkG,SAEvBpG,EAAMkB,aACT,IAAK,QACD+E,EAAa,yCACbhG,UAAWiG,EAAaG,KAAK,MACzBrG,EAAMmB,cAFG,CAGbG,MAAOtB,EAAMsB,MACbgF,SAAUtG,EAAMuE,WAChB,MACJ,IAAK,WACD0B,EAAa,4CACbhG,UAAWiG,EAAaG,KAAK,MACzBrG,EAAMmB,cAFG,CAGbG,MAAOtB,EAAMsB,MACbgF,SAAUtG,EAAMuE,WAChB,MACJ,IAAK,SACD0B,EAAa,4BACbhG,UAAWiG,EAAaG,KAAK,KAC7B/E,MAAOtB,EAAMsB,MACbgF,SAAUtG,EAAMuE,SACfvE,EAAMmB,cAAce,QAAQgC,KAAI,SAAAqC,GAAM,OACvC,4BAAQ5C,IAAK4C,EAAOjF,MACpBA,MAAOiF,EAAOjF,OAETiF,EAAOpE,kBAGZ,MACJ,QACI8D,EAAa,yCACbhG,UAAWiG,EAAaG,KAAK,MACxBrG,EAAMmB,cAFE,CAGXG,MAAOtB,EAAMsB,MACbgF,SAAUtG,EAAMuE,WAE1B,OACI,yBAAKtE,UAAWC,IAAQkE,OACpB,2BAAOnE,UAAWC,IAAQsG,OAAQxG,EAAMyG,OACvCR,K,mBC7CbS,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,MAAQ,qBAAqB,aAAe,4BAA4B,QAAU,yB,mBCAjID,EAAOC,QAAU,CAAC,gBAAkB,2C,mBCApCD,EAAOC,QAAU,CAAC,YAAc,iCAAiC,MAAQ","file":"static/js/3.4ebc92cc.chunk.js","sourcesContent":["import React from 'react'\nimport Burger from '../../Burger/Burger'\nimport Button from '../../UI/Button/Button'\nimport classes from './CheckoutSummary.module.css'\nconst checkoutSummary=(props)=>{\n    return(\n        <div className={classes.CheckoutSummary}>\n            <h1>We hope it tastes well!</h1>\n            <div style={{width:'100%',margin:'auto'}}>\n                <Burger ingredients={props.ingredients}/>\n            </div>\n            <Button btnType='Danger' clicked={props.checkoutCancelled}>\n                CANCEL\n            </Button>\n            <Button btnType='Success' clicked={props.checkoutContinued}>\n                CONTINUE\n            </Button>\n\n        </div>\n    )\n}\nexport default checkoutSummary","import React,{ Component } from \"react\";\nimport Button from '../../../components/UI/Button/Button'\nimport classes from './ContactData.module.css'\nimport axios from '../../../axios-orders'\nimport Spinner from '../../../components/UI/Spinner/Spinner'\nimport Input from '../../../components/UI/Input/Input'\nimport {connect} from 'react-redux'\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler'\nimport * as actions from '../../../store/actions/index'\nimport {updateObject,checkValidity} from '../../../shared/utility'\nclass ContactData extends Component{\n    state={\n        orderForm:{\n                name:{\n                    elementType:'input',\n                    elementConfig:{\n                        type:'text',\n                        placeholder:'Your Name'\n                    },\n                    value:'',\n                    validation:{\n                        required:true,\n                        \n                    },\n                    valid:false,\n                    touched:false\n                },\n                street:{\n                    elementType:'input',\n                    elementConfig:{\n                        type:'text',\n                        placeholder:'Street'\n                    },\n                    value:'',\n                    validation:{\n                        required:true\n                    },\n                    valid:false,\n                    touched:false\n                },\n                zipCode:{\n                    elementType:'input',\n                    elementConfig:{\n                        type:'text',\n                        placeholder:'ZIP Code'\n                    },\n                    value:'',\n                    validation:{\n                        required:true,\n                        minLength:6,\n                        maxLength:6\n                    },\n                    valid:false,\n                    touched:false\n                },\n                country:{\n                    elementType:'input',\n                    elementConfig:{\n                        type:'text',\n                        placeholder:'Your Country'\n                    },\n                    value:'',\n                    validation:{\n                        required:true\n                    },\n                    valid:false,\n                    touched:false\n                },\n                email:{\n                    elementType:'input',\n                    elementConfig:{\n                        type:'email',\n                        placeholder:'Your Mail'\n                    },\n                    value:'',\n                    validation:{\n                        required:true\n                    },\n                    valid:false,\n                    touched:false\n                },\n                deliveryMethod:{\n                    elementType:'select',\n                    elementConfig:{\n                        options:[\n                            {value:'fastest',displayValue:'Fastest'},\n                            {value:'cheapest',displayValue:'Cheapest'},\n\n                        ]\n                    },\n                    validation:{},\n                    value:'fastest',\n                    valid:true\n                },\n        },\n        formIsValid:false\n    }\n    \n    orderHandler=(event)=>{\n        event.preventDefault();\n         this.setState({loading:true})\n         const formData={};\n         for (let formElementIdentifier in this.state.orderForm){\n             formData[formElementIdentifier]=this.state.orderForm[formElementIdentifier].value\n\n         }\n        const order={\n            ingredients:this.props.ings,\n            price:this.props.price,\n            orderData:formData,\n            userId:this.props.userId\n            \n        }\n        this.props.onOrderBurger(order,this.props.token)\n        \n    }\n\n    inputChangedHandler=(event,inputIdentifier)=>{\n        const updatedFormElement=updateObject(this.state.orderForm[inputIdentifier],{\n                value:event.target.value,\n                valid:checkValidity(event.target.value,this.state.orderForm[inputIdentifier].validation),\n                touched:true\n        })\n        const updatedOrderForm=updateObject(this.state.orderForm,{\n            [inputIdentifier]:updatedFormElement\n        })\n        let formIsValid=true;\n        for(let inputIdentifier in updatedOrderForm){\n            formIsValid=updatedOrderForm[inputIdentifier].value && formIsValid\n        }\n        this.setState({orderForm:updatedOrderForm,formIsValid:formIsValid})\n    }\n    render(){\n        const formElementsArray=[];\n        for(let key in this.state.orderForm){\n            formElementsArray.push({\n                id:key,\n                config:this.state.orderForm[key]\n            })\n        }\n        let form=(\n            <form onSubmit={this.orderHandler}>\n                {formElementsArray.map(formElement=>(\n                    <Input key={formElement.id}\n                    elementType={formElement.config.elementType}\n                    elementConfig={formElement.config.elementConfig}\n                    value={formElement.config.value}\n                    invalid={!formElement.config.valid}\n                    shouldValidate={formElement.config.validation}\n                    touched={formElement.config.touched}\n                    changed={(event)=>this.inputChangedHandler(event,formElement.id)}/>\n                ))}\n                    <Button btnType='Success' disabled={!this.state.formIsValid}>ORDER</Button>\n                </form>\n        )\n        if(this.props.loading){\n            form=<Spinner/>\n        }\n        return(\n            <div className={classes.ContactData}>\n                <h4>Enter Your Contact Data</h4>\n                {form}\n            </div>\n        )\n    }\n}\nconst mapStateToProps=state=>{\n    return{\n        ings:state.burgerBuilder.ingredients,\n        price:state.burgerBuilder.totalPrice,\n        loading:state.order.loading,\n        token:state.auth.token,\n        userId:state.auth.userId\n    }\n}\nconst mapDispatchToProps=dispatch=>{\n    return{\n        onOrderBurger:(orderData,token)=>dispatch(actions.purchaseBurger(orderData,token))\n    }\n    \n}\nexport default connect(mapStateToProps,mapDispatchToProps)(withErrorHandler(ContactData,axios))","import React,{ Component } from \"react\";\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary'\nimport ContactData from \"./ContactData/ContactData\";\nimport { Route,Redirect } from \"react-router-dom\";\nimport{connect} from 'react-redux'\nclass Checkout extends Component{\n    \n    \n    checkoutCancelledHandler=()=>{\n        this.props.history.goBack()\n    }\n    checkoutContinueHandler=()=>{\n        this.props.history.replace('/checkout/contact-data')\n    }\n    render(){\n        let summary=<Redirect to='/'/>\n        if(this.props.ings){\n            const purchasedRedirect=this.props.purchased?<Redirect to='/'/>:null\n            summary=(\n                <div>\n                    {purchasedRedirect}\n                <CheckoutSummary \n                ingredients={this.props.ings}\n                checkoutCancelled={this.checkoutCancelledHandler}\n                checkoutContinued={this.checkoutContinueHandler}\n                />\n                <Route path={this.props.match.path+'/contact-data'} component={ContactData}/>\n                </div>\n            )\n        }\n        return summary\n    }\n}\nconst mapStateToProps=state=>{\n    return{\n        ings:state.burgerBuilder.ingredients,\n        price:state.burgerBuilder.totalPrice,\n        purchased:state.order.purchased\n    }\n\n}\n\nexport default connect(mapStateToProps)(Checkout)","import React from 'react'\nimport classes from './Input.module.css'\nconst input=(props)=>{\n    let inputElement=null;\n    const inputClasses=[classes.InputElement]\n    if(props.invalid && props.shouldValidate && props.touched){\n        inputClasses.push(classes.Invalid)\n    }\n    switch(props.elementType){\n        case('input'):\n            inputElement=<input \n            className={inputClasses.join(' ')} \n            {...props.elementConfig} \n            value={props.value}\n            onChange={props.changed} />\n            break;\n        case('textarea'):\n            inputElement=<textarea \n            className={inputClasses.join(' ')} \n            {...props.elementConfig} \n            value={props.value}\n            onChange={props.changed}/>\n            break;\n        case('select'):\n            inputElement=<select \n            className={inputClasses.join(' ')} \n            value={props.value}\n            onChange={props.changed}>\n            {props.elementConfig.options.map(option=>(\n            <option key={option.value}\n            value={option.value}\n            >\n                {option.displayValue}</option>\n            ))}\n            </select>\n            break;\n        default:\n            inputElement=<input \n            className={inputClasses.join(' ')}\n             {...props.elementConfig}\n              value={props.value}\n              onChange={props.changed}/>\n    }\n    return(\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    )\n}\nexport default input","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3PsXi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__20AK_\",\"Input\":\"ContactData_Input__2fK5-\"};"],"sourceRoot":""}