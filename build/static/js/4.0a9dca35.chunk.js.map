{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","options","option","displayValue","Input","Label","label"],"mappings":"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","file":"static/js/4.0a9dca35.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Zul_\",\"Input\":\"Auth_Input__2LQ-q\"};","import React, { Component } from 'react'\nimport Input from '../../components/UI/Input/Input'\nimport Button from '../../components/UI/Button/Button'\nimport classes from './Auth.module.css'\nimport * as actions from '../../store/actions/index'\nimport {connect} from 'react-redux'\nimport Spinner from '../../components/UI/Spinner/Spinner'\nimport { Redirect } from 'react-router-dom'\nimport{updateObject,checkValidity} from '../../shared/utility'\nclass Auth extends Component{\n    state={\n        controls:{\n            email:{\n                elementType:'input',\n                elementConfig:{\n                    type:'email',\n                    placeholder:'Mail Address'\n                },\n                value:'',\n                validation:{\n                    required:true,\n                    isEmail:true\n                    \n                },\n                valid:false,\n                touched:false\n            },\n            password:{\n                elementType:'input',\n                elementConfig:{\n                    type:'password',\n                    placeholder:'Password'\n                },\n                value:'',\n                validation:{\n                    required:true,\n                    minLength:6\n                    \n                },\n                valid:false,\n                touched:false\n            }\n        },isSignup:true\n    }\n    componentDidMount(){\n        if(!this.props.buildingBurger && this.props.authRedirectPath!=='/'){\n            this.props.onSetRedirectPath();\n        }\n    }\n    \n    inputChangedHandler=(event,controlName)=>{\n        const updatedControls=updateObject(this.state.controls,{\n            [controlName]:updateObject(this.state.controls[controlName],{\n                value:event.target.value,\n                valid:checkValidity(event.target.value,this.state.controls[controlName].validation),\n                touched:true\n            })\n        })\n        this.setState({controls:updatedControls})\n    }\n    submitHandler=(event)=>{\n        event.preventDefault();\n        this.props.onAuth(this.state.controls.email.value,this.state.controls.password.value,this.state.isSignup)\n    }\n    switchAuthModeHandler=()=>{\n        this.setState(prevState=>{\n            return{\n                isSignup:!prevState.isSignup\n            }\n        })\n    }\n    render(){\n        const formElementsArray=[];\n        for(let key in this.state.controls){\n            formElementsArray.push({\n                id:key,\n                config:this.state.controls[key]\n            })\n        }\n        let form=formElementsArray.map(formElement=>(\n            <Input key={formElement.id}\n                    elementType={formElement.config.elementType}\n                    elementConfig={formElement.config.elementConfig}\n                    value={formElement.config.value}\n                    invalid={!formElement.config.valid}\n                    shouldValidate={formElement.config.validation}\n                    touched={formElement.config.touched}\n                    changed={(event)=>this.inputChangedHandler(event,formElement.id)}/>\n        ))\n        if(this.props.loading){\n            form=<Spinner/>\n        }\n        let errorMessage=null;\n        if(this.props.error){\n            errorMessage=(\n            <p>{this.props.error.message}</p>\n            )\n        }\n        let authRedirect=null;\n        if(this.props.isAuthenticated){\n            authRedirect=<Redirect to={this.props.authRedirectPath}/>\n        }\n        \n        return(\n            <div className={classes.Auth}>\n                {authRedirect}\n                {errorMessage}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button btnType='Success'>SUBMIT</Button>\n                    <Button btnType='Danger' clicked={this.switchAuthModeHandler}>SWITCH TO {this.state.isSignup?'SIGNIN':'SIGNUP'}</Button>\n                </form>\n            </div>\n        )\n    }\n}\nconst mapStateToProps=state=>{\n    return{\n        loading:state.auth.loading,\n        error:state.auth.error,\n        isAuthenticated:state.auth.token !==null,\n        buildingBurger:state.burgerBuilder.building,\n        authRedirectPath:state.auth.authRedirectPath\n    }\n}\nconst mapDispatchToProps=dispatch=>{\n    return{\n        onAuth:(email,password,isSignup)=>dispatch(actions.auth(email,password,isSignup)),\n        onSetRedirectPath:()=>dispatch(actions.setAuthRedirectPath('/'))\n    }\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(Auth)","import React from 'react'\nimport classes from './Input.module.css'\nconst input=(props)=>{\n    let inputElement=null;\n    const inputClasses=[classes.InputElement]\n    if(props.invalid && props.shouldValidate && props.touched){\n        inputClasses.push(classes.Invalid)\n    }\n    switch(props.elementType){\n        case('input'):\n            inputElement=<input \n            className={inputClasses.join(' ')} \n            {...props.elementConfig} \n            value={props.value}\n            onChange={props.changed} />\n            break;\n        case('textarea'):\n            inputElement=<textarea \n            className={inputClasses.join(' ')} \n            {...props.elementConfig} \n            value={props.value}\n            onChange={props.changed}/>\n            break;\n        case('select'):\n            inputElement=<select \n            className={inputClasses.join(' ')} \n            value={props.value}\n            onChange={props.changed}>\n            {props.elementConfig.options.map(option=>(\n            <option key={option.value}\n            value={option.value}\n            >\n                {option.displayValue}</option>\n            ))}\n            </select>\n            break;\n        default:\n            inputElement=<input \n            className={inputClasses.join(' ')}\n             {...props.elementConfig}\n              value={props.value}\n              onChange={props.changed}/>\n    }\n    return(\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    )\n}\nexport default input","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};"],"sourceRoot":""}